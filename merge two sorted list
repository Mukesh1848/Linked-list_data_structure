/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
 
class Solution {
    private:
    ListNode* solve(ListNode* list1, ListNode* list2){

    // if only one element is present in first list
    if(list1 -> next ==NULL){
        list1 -> next = list2;
        return list1;
    }


      ListNode* curr1 = list1;
      ListNode* next1 = list1->next;
      ListNode* curr2 = list2;
      ListNode* next2 = list2->next;


      while( next1 != NULL && curr2 != NULL){
          if( (curr1 -> val <= curr2 -> val ) && (curr2 -> val <= next1-> val)){
           
        //    adding list between list one
           curr1->next = curr2;
           next2 = curr2 -> next;
           curr2->next = next1;
        //    update pointer
           curr1 = curr2;
           curr2 = next2;
          }
          else{
            //  curr1 and next1 ko aage badhana padega 
             curr1 = next1;
             next1 = next1 -> next;

             if(next1 == NULL){
                 curr1 -> next = curr2;
                 return list1;
             } 

          }
      }
      return list1;

    }
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1 == NULL){
            return list2;
        }

        if(list2 == NULL){
            return list1;
        }

        if(list1 -> val <= list2 -> val ){
       return solve(list1, list2);
    }
    else
        {
           return solve(list2, list1);
        }
    }
};

T.C. =O(N)
S.C. =O(1)

//  second solution 

 ListNode* merge(ListNode* left , ListNode* right){

        if(left == NULL){
            return right;
        }
        if(right == NULL){
            return left;
        }

        ListNode* ans = new ListNode(-1);
        ListNode* temp = ans;

        while(left != NULL && right != NULL){

            if(left -> val < right -> val){
                temp -> next = left;
                temp = left;
                left = left -> next;
            }
            else{
                temp -> next = right;
                temp = right;
                right = right -> next;
            }
        }

        while(left != NULL) {
            temp -> next = left;
            temp = left;
            left = left -> next;
        }
        
        while(right != NULL) {
            temp -> next = right;
            temp = right;
            right = right -> next;
        }

        ans = ans -> next;   
        return ans;
    }
    

T.C. =O(nlog(n))
S.C. =O(nlog(n))   
